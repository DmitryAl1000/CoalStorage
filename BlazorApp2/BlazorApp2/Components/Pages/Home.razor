@page "/"
@rendermode InteractiveServer
@inject CoalStorageMsSqlDbContext dbContext
@inject NotificationService NotificationService

<PageTitle>Home</PageTitle>


<h2>Груз на площадках</h2>

@if (_selectedArea is not null)
{
    @foreach (var area in _selectedArea)
    {
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
            <RadzenRow class="rz-text-align-center" Gap="1rem">
                <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-4">
                    <RadzenText TextStyle="TextStyle.H2" TagName="TagName.H3">@area.AreaName</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Сейчас на площадке: @GetCargoOnArea(@area.AreaName) тонн груза</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenRow class="rz-p-5">
                        <RadzenFormField Text="Новое значение для груза">

                            <RadzenTemplateForm TItem="Area" Data=@model>
                                <RadzenNumeric Name="CargoOnArea" @bind-Value="@_newAreaCargoCount" Style="display: block; width: 100%;" />
                                <RadzenNumericRangeValidator Component="CargoOnArea" Min=@MIN_CARGO Max=@MAX_CARGO Text=@VALIDATION_TEXT Popup=true Style="position: fixed" />
                            </RadzenTemplateForm>
                        </RadzenFormField>
                    </RadzenRow>
                    <RadzenRow class="rz-p-5">
                        <RadzenButton Click=@(args => ChangeButtonClick()) Text="Изменить значение" ButtonStyle="ButtonStyle.Success" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    }
}
else
{
    <p>Загрузка...</p>
}


@if (Areas is not null)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@Areas" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedArea>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Area.AreaName)" Filterable="true" Title="Номер площадки" Frozen="true" Width="200px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn Property="@nameof(Area.CargoOnArea)" Title="Груз на площадке(т)" TextAlign="TextAlign.Center" Frozen="true" Width="200px" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>Загрузка...</p>
}

@code {
    const string NOOBJECT_MESSEGE = "Данные не были изменены, объект отсутствует";
    const string CARGO_NOT_CHANGED = "Груз не изменён";

    const double MIN_CARGO = 0;
    const double MAX_CARGO = 500000;
    readonly string VALIDATION_TEXT = $"Значение от {MIN_CARGO} до {MAX_CARGO} тонн";

    public List<Area>? Areas { get; set; }

    public Area model = new();

    double _newAreaCargoCount;


    //при изменениях выделенного поля меняем элемент в поле ввода
    private IList<Area>? SelectedArea
    {
        get { return _selectedArea; }
        set
        {
            _selectedArea = value;
            SetInputCargoField();
        }
    }
    IList<Area>? _selectedArea;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Task.Run(() => Areas = dbContext.Areas.OrderBy(x => x.AreaName).ToList());
        SetFirstSelectedArea();
        SetInputCargoField();
    }

    // Устанавливаем выделение первой ячейки
    private void SetFirstSelectedArea()
    {
        if (Areas is not null && Areas.Count != 0)
        {
            var area = Areas.FirstOrDefault() ?? new Area();
            _selectedArea = new List<Area>()
            {
                area
            };
        }
    }

    // Устанавливаем значение в поле ввода соответствующее первой ячейке при инициализации
    private void SetInputCargoField()
    {
        if (_selectedArea is not null && _selectedArea.Count != 0)
        {
            double cargoOnArea = _selectedArea?.FirstOrDefault()?.CargoOnArea ?? 0;
            _newAreaCargoCount = cargoOnArea;
        }
    }

    private async Task ChangeButtonClick()
    {

        if (_selectedArea is null
         || Areas is null
        || Areas.Count == 0)
        {
            ShowNotificationMessege(NOOBJECT_MESSEGE);
            return;
        }

        if (_newAreaCargoCount < MIN_CARGO || _newAreaCargoCount > MAX_CARGO)
        {
            ShowNotificationMessege(CARGO_NOT_CHANGED);
            return;
        }

        string message = CARGO_NOT_CHANGED;
        Area? selectedArea = GetSingleSelectedArea();

        foreach (var item in Areas)
        {
            if (selectedArea.AreaName == item.AreaName
              && _newAreaCargoCount != item.CargoOnArea)
            {
                message = $"Груз на площадке {selectedArea.AreaName} изменен с {item.CargoOnArea} на {_newAreaCargoCount}\n";
                item.CargoOnArea = _newAreaCargoCount;
                await AddToCargoHistoryAsync(item);
            }
        }
        ShowNotificationMessege(message);
    }

    private async Task AddToCargoHistoryAfterAsync()
    {
        Area? selectedArea = GetSingleSelectedArea();
        await Task.Run(() =>
         AddToCargoHistory(selectedArea)
        );
    }


    private async Task AddToCargoHistoryAsync(Area area)
    {
        await Task.Run(() =>
         AddToCargoHistory(area)
        );
    }

    private void AddToCargoHistory(Area area)
    {
        dbContext.CargoHistory.Add(new CargoHistory()
            {
                DateTime = DateTime.Now,
                AreaName = area.AreaName,
                CargoOnArea = area.CargoOnArea
            });
        dbContext.SaveChanges();
    }

    private void ShowNotificationMessege(string massage, string header = "", NotificationSeverity severity = NotificationSeverity.Info)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = severity,
                Summary = header,
                Detail = massage
            });
    }

    //Сколько груза на площадкe
    private double GetCargoOnArea(string areaName)
    {
        if (Areas is null) return -1;
        foreach (var area in Areas)
        {
            if (area.AreaName == areaName)
            {
                return area.CargoOnArea;
            }
        }
        return 0;
    }


    private Area GetSingleSelectedArea()
    {
        Area area = new();
        if (_selectedArea is null || _selectedArea.Count == 0) 
            return area;
        else
            return  _selectedArea.FirstOrDefault() ?? area;
    }




}

